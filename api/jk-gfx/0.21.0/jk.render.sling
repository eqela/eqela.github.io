class name jk.render.RenderingContext header abstract public
{
	import jk.lang
	import jk.gfx
	ctor
	var REPEAT_BOTH public static const as int
	var REPEAT_X public static const as int
	var REPEAT_Y public static const as int
	var REPEAT_NONE public static const as int
	var LINE_CAP_BUTT public static const as int
	var LINE_CAP_ROUND public static const as int
	var LINE_CAP_SQUARE public static const as int
	var LINE_JOIN_MITER public static const as int
	var LINE_JOIN_BEVEL public static const as int
	var LINE_JOIN_ROUND public static const as int
	var ALIGN_START public static const as int
	var ALIGN_END public static const as int
	var ALIGN_CENTER public static const as int
	var ALIGN_LEFT public static const as int
	var ALIGN_RIGHT public static const as int
	var BASELINE_ALPHABETIC public static const as int
	var BASELINE_TOP public static const as int
	var BASELINE_HANGING public static const as int
	var BASELINE_MIDDLE public static const as int
	var BASELINE_IDEOGRAPHIC public static const as int
	var BASELINE_BOTTOM public static const as int
	func setFillStyle(style as object) abstract
	func setStrokeStyle(style as object) abstract
	func setShadowColor(color as jk.gfx.Color) abstract
	func setShadowBlur(blur as double) abstract
	func setShadowOffsetX(offset as double) abstract
	func setShadowOffsetY(offset as double) abstract
	func createLinearGradient(x0 as double, y0 as double, x1 as double, y1 as double) abstract as object
	func createPattern(image as jk.gfx.Image, repeat as int) abstract as object
	func createRadialGradient(x0 as double, y0 as double, r0 as double, x1 as double, y1 as double, r1 as double) abstract as object
	func addColorStop(gradient as object, index as double, color as jk.gfx.Color) abstract
	func setLineCap(cap as int) abstract
	func setLineJoin(join as int) abstract
	func setLineWidth(width as double) abstract
	func setMiterLimit(limit as double) abstract
	func rect(x as double, y as double, width as double, height as double) abstract
	func fillRect(x as double, y as double, width as double, height as double) abstract
	func strokeRect(x as double, y as double, width as double, height as double) abstract
	func clearRect(x as double, y as double, width as double, height as double) abstract
	func fill abstract
	func stroke abstract
	func beginPath abstract
	func moveTo(x as double, y as double) abstract
	func closePath abstract
	func lineTo(x as double, y as double) abstract
	func clip abstract
	func quadraticCurveTo(cpx as double, cpy as double, x as double, y as double) abstract
	func bezierCurveTo(cp1x as double, cp1y as double, cp2x as double, cp2y as double, x as double, y as double) abstract
	func arc(x as double, y as double, r as double, sAngle as double, eAngle as double, counterclockwise as bool) abstract
	func arcTo(x1 as double, y1 as double, x2 as double, y2 as double, r as double) abstract
	func isPointInPath(x as double, y as double) abstract as bool
	func scale(scalewidth as double, scaleheight as double) abstract
	func rotate(angle as double) abstract
	func translate(x as double, y as double) abstract
	func transform(a as double, b as double, c as double, d as double, e as double, f as double) abstract
	func setTransform(a as double, b as double, c as double, d as double, e as double, f as double) abstract
	func setFont(font as jk.gfx.FontDescription) abstract
	func setTextAlign(align as int) abstract
	func setTextBaseline(baseline as int) abstract
	func fillText(text as string, x as double, y as double, maxWidth as double) abstract
	func strokeText(text as string, x as double, y as double, maxWidth as double) abstract
	func measureTextHeight(text as string) abstract as double
	func measureTextWidth(text as string) abstract as double
	func drawImage(img as jk.gfx.Image, x as double, y as double) abstract
	func drawAndScaleImage(img as jk.gfx.Image, x as double, y as double, width as double, height as double) abstract
	func drawAndProcessImage(img as jk.gfx.Image, sx as double, sy as double, swidth as double, sheight as double, x as double, y as double, width as double, height as double) abstract
	func setGlobalAlpha(alpha as double) abstract
	func save abstract
	func restore abstract
}
interface name jk.render.Renderer header public
{
	import jk.lang
	func render(ctx as jk.render.RenderingContext, width as double, height as double)
}
