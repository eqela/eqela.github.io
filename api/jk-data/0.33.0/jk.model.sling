class name jk.model.DynamicModel header implements jk.json.JSONObject implements jk.lang.StringObject public
{
	import jk.lang
	import jk.json
	func asDynamicMap(object as jk.model.DynamicModel) static as jk.lang.DynamicMap
	property data as jk.lang.DynamicMap { hasset hasget }
	property fields as vector<jk.model.DynamicModelField> { hasset hasget }
	macro SET_VECTOR_FIELD(name, value) 
	{
		if value == null {
			setField(name, null)
		}
		else {
			Error.throw("setVectorNotSupported", name)
		}
	}
	macro RETURN_VECTOR_FIELD_OBJECTS(name, type) 
	{
		var objects = assert getFieldAsDynamicVector(name)
		var v = new vector<__type__>
		foreach object as DynamicMap in objects:
			v += new __type__(object)
		return v
	}
	ctor
	ctor(data as jk.lang.DynamicMap)
	ctor(data as jk.model.DynamicModel, mapping as jk.lang.DynamicMap)
	func toString as string
	func toDynamicMap as jk.lang.DynamicMap
	func fromDynamicMap(data as jk.lang.DynamicMap)
	func toJsonObject as object
	func setField(name as string, value as object)
	func getField(name as string) as object
	func getOrCreateFieldAsDynamicVector(name as string) as jk.lang.DynamicVector
	func getFieldAsDynamicVector(name as string) as jk.lang.DynamicVector
	func getFieldAsStringVector(name as string) as vector<string>
	func getFieldAsIntegerVector(name as string) as vector<int>
	func getFieldAsLongIntegerVector(name as string) as vector<long>
	func getFieldAsDoubleVector(name as string) as vector<double>
	func getFieldAsBooleanVector(name as string) as vector<bool>
	func addStringToVectorField(field as string, value as string)
	func addIntegerToVectorField(field as string, value as int)
	func addLongIntegerToVectorField(field as string, value as long)
	func addDoubleToVectorField(field as string, value as double)
	func addBooleanToVectorField(field as string, value as bool)
	func addBufferToVectorField(field as string, value as buffer)
	func addObjectToVectorField(field as string, value as object)
	func fromJsonObject(o as object) as bool
	func containsField(field as string) as bool
	func hasValue(key as string) as bool
	func removeNullValues
	func clear
	func setAllFields
	func getModelMetadata virtual as string
	func getFieldInformation virtual as vector<jk.model.DynamicModelField>
	func copyFrom(other as jk.model.DynamicModel, mapping as jk.lang.DynamicMap)
}
class name jk.model.DynamicModelField header public
{
	import jk.lang
	ctor
	var TYPE_UNKNOWN public static const as int
	var TYPE_OBJECT public static const as int
	var TYPE_STRING public static const as int
	var TYPE_BUFFER public static const as int
	var TYPE_INTEGER public static const as int
	var TYPE_LONG_INTEGER public static const as int
	var TYPE_DOUBLE public static const as int
	var TYPE_BOOLEAN public static const as int
	var TYPE_VECTOR public static const as int
	var TYPE_MAP public static const as int
	property name as string { hasset hasget }
	property encodedName as string { hasset hasget }
	property type as int { hasset hasget }
	property description as string { hasset hasget }
	property tags as vector<string> { hasset hasget }
	func hasTag(tag as string) as bool
	func addToTags(tag as string)
}
