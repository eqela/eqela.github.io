class name jk.socket.TCPSocket header implements jk.socket.ConnectedSocket abstract public
{
	import jk.lang
	import jk.io
	ctor
	func create static as jk.socket.TCPSocket
	func createAndConnect(address as string, port as int) static as jk.socket.TCPSocket
	func createAndListen(port as int) static as jk.socket.TCPSocket
	func getRemoteAddress abstract as string
	func getRemotePort abstract as int
	func getLocalAddress abstract as string
	func getLocalPort abstract as int
	func connect(address as string, port as int) abstract as bool
	func listen(port as int) abstract as bool
	func accept abstract as jk.socket.TCPSocket
	func setBlocking(blocking as bool) abstract as bool
	func getBlocking abstract as bool
	func close abstract
	func read(buffer as buffer) abstract as int
	func readWithTimeout(buffer as buffer, timeout as int) virtual as int
	func write(buffer as buffer, size as int) abstract as int
	func getLastErrorDescription as string #getterMethod
	func setLastErrorDescription(v as string) as jk.socket.TCPSocket #setterMethod
}
interface name jk.socket.ConnectedSocket header implements jk.io.Reader implements jk.io.Writer implements jk.lang.Closable public
{
	import jk.lang
	import jk.io
}
class name jk.socket.UDPSocket header abstract public
{
	import jk.lang
	ctor
	func create static as jk.socket.UDPSocket
	func send(message as buffer, address as string, port as int) abstract as int
	func sendBroadcast(message as buffer, address as string, port as int) abstract as int
	func receive(message as buffer, timeout as int) abstract as int
	func bind(port as int) abstract as bool
	func close abstract
	func getLocalAddress abstract as string
	func getLocalPort abstract as int
}
