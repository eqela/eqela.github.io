class name jk.socket.ssl.SSLSocket header implements jk.socket.ConnectedSocket abstract public
{
	import jk.lang
	import jk.socket
	import jk.log
	import jk.fs
	ctor
	func createInstance(cSocket as jk.socket.ConnectedSocket, serverAddress as string = null, ctx as jk.log.LoggingContext = null, certFile as jk.fs.File = null, keyFile as jk.fs.File = null, isServer as bool = false, acceptInvalidCertificate as bool = false, passphrase as string = null) static as jk.socket.ssl.SSLSocket
	func forClient(cSocket as jk.socket.ConnectedSocket, hostAddress as string, ctx as jk.log.LoggingContext = null, acceptInvalidCertificate as bool = false, passphrase as string = null) static as jk.socket.ssl.SSLSocket
	func forServer(cSocket as jk.socket.ConnectedSocket, certFile as jk.fs.File = null, keyFile as jk.fs.File = null, ctx as jk.log.LoggingContext = null, acceptInvalidCertificate as bool = false, passphrase as string = null) static as jk.socket.ssl.SSLSocket
	func setAcceptInvalidCertificate(accept as bool) abstract
	func setRequireClientCertificate(require as bool) abstract
	func close abstract
	func read(buffer as buffer) abstract as int
	func readWithTimeout(buffer as buffer, timeout as int) abstract as int
	func write(buffer as buffer, size as int) abstract as int
	func getSocket abstract as jk.socket.ConnectedSocket
}
